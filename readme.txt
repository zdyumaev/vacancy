Задание:
    Необходимо разработать веб-службу с архитектурой REST для работы с вакансиями. Для разработки веб-службы необходимо использовать Golang.
    1. Сущность вакансии:
        Уникальный идентификатор (ID) - Целое число
        Наименование                  - Строка
        Уровень зарплаты              - Целое число
        Требуемый опыт работы         - Строка
        Город                         - Строка
    2. Реализуемые методы веб-службы
        PUT /vacancy         - Создание новой вакансии
        GET /vacancy         - Список вакансий отсортированных по наименованию
        GET /vacancy/{id}    - Вакансия с ID {id}
        DELETE /vacancy/{id} - удаление вакансии с ID {id}
    3. Для хранения данных необходимо использовать БД (Postgres)
    4. При взаимодействии с веб-службой данные передаются в json формате
    5. Необходимо реализовать метод аутентификации пользователя. Ролевая модель содержит две роли ( viewer, editor). В зависимости от используемой роли, для выполнения доступны разные методы. 
        viewer
            GET /vacancy
            GET /vacancy/{id}
        editor
            PUT /vacancy
            GET /vacancy
            GET /vacancy/{id}
            DELETE /vacancy/{id}
    6. Все настройки (например параметры доступа к БД)  модуля хранить в файле в любом удобном формате.

Может потребоваться установка следующих пакетов:
    github.com/jmoiron/sqlx    
	github.com/lib/pq

Предполагаемое имя базы данных: "vacancy".

Запросы для инициализации базы данных находятся в файле "initDB.sql".

Настройки сервиса лежат в файле "config.json".

Самостоятельные уточнения к заданию:
    - не выдаётся тело для PUT и DELETE запросов;
    - PUT создаёт сущность или обновляет, если она уже существует;
    - PUT игнорирует заголовки Content-*;
    - для поля вакансии "Уровень зарплаты" введено дополнительное логическое органичение положительности;
    - запросы GET и PUT так же работают по роуту "/vacancy/";
    - в программе менее 400 строк, практической выгоды от разбиения на отдельные пакеты нет;
    - для простоты используется logger по умолчанию, а не заводится собственный;
    - сообщения об ошибках не оборачиваются в json;
    - ssl при соединении с базой отключён, чтобы работало без генерации сертификата;
    - каждый пользователь для упрощения может иметь только одну роль;
    - для ролей определены только разрешенные методы, без уточнения роута;
    - никаких действий и ограничений на удаление и изменение внешних ключей для ролевых таблиц не установлено;
    - пользователь, которому не разрешены никакие методы доступа, получает 401;
    - для сервиса выбран HTTP Basic Authentication;
    - чтобы не передавать учётные данные в открытом виде сгенерирован самоподписанный сертификат для localhost;
    - HTTPS можно отключить в файле конфигурации;
    - строка авторизации для пользователя vi роли viewer: "Authorization: Basic dmk6cGFzc192aQ==";
    - строка авторизации для пользователя ed роли editor: "Authorization: Basic ZWQ6cGFzc19lZA==";
    - тестируются только handler`ы: запросы к базе требуют зависимости от внешнего мира, в main и config тестировать особо нечего.